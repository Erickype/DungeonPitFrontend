//Generated by TurboLink CodeGenerator, do not edit!
#include "SGame/GameClient.h"
#include "SGame/GameService.h"
#include "GameContext.h"
#include "TurboLinkGrpcManager_Private.h"
#include "Templates/SharedPointer.h"

FGrpcContextHandle UDungeonServiceClient::InitLogin()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_DungeonService_Login>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UDungeonServiceClient::Login(FGrpcContextHandle Handle, const FGrpcGameLoginRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextLogin = StaticCastSharedPtr<GrpcContext_DungeonService_Login>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextLogin->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextLogin->RpcContext->set_deadline(deadLine);
		}
		contextLogin->Call(Request);
	}
}

FGrpcContextHandle UDungeonServiceClient::InitLogout()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_DungeonService_Logout>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UDungeonServiceClient::Logout(FGrpcContextHandle Handle, const FGrpcGameLogoutRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextLogout = StaticCastSharedPtr<GrpcContext_DungeonService_Logout>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextLogout->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextLogout->RpcContext->set_deadline(deadLine);
		}
		contextLogout->Call(Request);
	}
}

FGrpcContextHandle UDungeonServiceClient::InitGetCurrentRoom()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_DungeonService_GetCurrentRoom>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UDungeonServiceClient::GetCurrentRoom(FGrpcContextHandle Handle, const FGrpcGamePlayerRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextGetCurrentRoom = StaticCastSharedPtr<GrpcContext_DungeonService_GetCurrentRoom>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextGetCurrentRoom->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextGetCurrentRoom->RpcContext->set_deadline(deadLine);
		}
		contextGetCurrentRoom->Call(Request);
	}
}

FGrpcContextHandle UDungeonServiceClient::InitMove()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_DungeonService_Move>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UDungeonServiceClient::Move(FGrpcContextHandle Handle, const FGrpcGameMoveRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextMove = StaticCastSharedPtr<GrpcContext_DungeonService_Move>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextMove->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextMove->RpcContext->set_deadline(deadLine);
		}
		contextMove->Call(Request);
	}
}

FGrpcContextHandle UDungeonServiceClient::InitGetDungeonData()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_DungeonService_GetDungeonData>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UDungeonServiceClient::GetDungeonData(FGrpcContextHandle Handle, const FGrpcGameGetDungeonDataRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextGetDungeonData = StaticCastSharedPtr<GrpcContext_DungeonService_GetDungeonData>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextGetDungeonData->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextGetDungeonData->RpcContext->set_deadline(deadLine);
		}
		contextGetDungeonData->Call(Request);
	}
}

void UDungeonServiceClient::TryCancel(FGrpcContextHandle Handle)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		(*context)->TryCancel();
	}
}

void UDungeonServiceClient::Shutdown()
{
	OnLoginResponse.Clear();
	OnLogoutResponse.Clear();
	OnGetCurrentRoomResponse.Clear();
	OnMoveResponse.Clear();
	OnGetDungeonDataResponse.Clear();
	Super::Shutdown();
}

