//Generated by TurboLink CodeGenerator, do not edit!
#include "GameMarshaling.h"

void GRPC_TO_TURBOLINK(const ::game::GetDungeonDataRequest* in, FGrpcGameGetDungeonDataRequest* out)
{
    out->PlayerId=StringCast<TCHAR>((const UTF8CHAR*)(in->player_id().c_str())).Get();
}

void TURBOLINK_TO_GRPC(const FGrpcGameGetDungeonDataRequest* in, ::game::GetDungeonDataRequest* out)
{
    out->set_player_id((const char*)StringCast<UTF8CHAR>(*(in->PlayerId)).Get());
}

void GRPC_TO_TURBOLINK(const ::game::GetDungeonDataResponse* in, FGrpcGameGetDungeonDataResponse* out)
{
    out->Rooms.Empty();
    for (int i=0; i<in->rooms_size(); ++i) {
        FGrpcGameRoomResponse field;
        GRPC_TO_TURBOLINK(&(in->rooms(i)), &field);
        out->Rooms.Add(MakeShareable(new FGrpcGameRoomResponse(field)));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcGameGetDungeonDataResponse* in, ::game::GetDungeonDataResponse* out)
{
    for(const auto& value : in->Rooms) {
        TURBOLINK_TO_GRPC(value.Get(), out->add_rooms());
    } 
}

void GRPC_TO_TURBOLINK(const ::game::LoginRequest* in, FGrpcGameLoginRequest* out)
{
    out->Username=StringCast<TCHAR>((const UTF8CHAR*)(in->username().c_str())).Get();
}

void TURBOLINK_TO_GRPC(const FGrpcGameLoginRequest* in, ::game::LoginRequest* out)
{
    out->set_username((const char*)StringCast<UTF8CHAR>(*(in->Username)).Get());
}

void GRPC_TO_TURBOLINK(const ::game::LoginResponse* in, FGrpcGameLoginResponse* out)
{
    out->PlayerId=StringCast<TCHAR>((const UTF8CHAR*)(in->player_id().c_str())).Get();
}

void TURBOLINK_TO_GRPC(const FGrpcGameLoginResponse* in, ::game::LoginResponse* out)
{
    out->set_player_id((const char*)StringCast<UTF8CHAR>(*(in->PlayerId)).Get());
}

void GRPC_TO_TURBOLINK(const ::game::LogoutRequest* in, FGrpcGameLogoutRequest* out)
{
    out->PlayerId=StringCast<TCHAR>((const UTF8CHAR*)(in->player_id().c_str())).Get();
}

void TURBOLINK_TO_GRPC(const FGrpcGameLogoutRequest* in, ::game::LogoutRequest* out)
{
    out->set_player_id((const char*)StringCast<UTF8CHAR>(*(in->PlayerId)).Get());
}

void GRPC_TO_TURBOLINK(const ::game::LogoutResponse* in, FGrpcGameLogoutResponse* out)
{
    out->PlayerId=StringCast<TCHAR>((const UTF8CHAR*)(in->player_id().c_str())).Get();
}

void TURBOLINK_TO_GRPC(const FGrpcGameLogoutResponse* in, ::game::LogoutResponse* out)
{
    out->set_player_id((const char*)StringCast<UTF8CHAR>(*(in->PlayerId)).Get());
}

void GRPC_TO_TURBOLINK(const ::game::PlayerRequest* in, FGrpcGamePlayerRequest* out)
{
    out->PlayerId=StringCast<TCHAR>((const UTF8CHAR*)(in->player_id().c_str())).Get();
}

void TURBOLINK_TO_GRPC(const FGrpcGamePlayerRequest* in, ::game::PlayerRequest* out)
{
    out->set_player_id((const char*)StringCast<UTF8CHAR>(*(in->PlayerId)).Get());
}

void GRPC_TO_TURBOLINK(const ::game::MoveRequest* in, FGrpcGameMoveRequest* out)
{
    out->PlayerId=StringCast<TCHAR>((const UTF8CHAR*)(in->player_id().c_str())).Get();
    out->Direction=StaticCast<EGrpcGameDirection>(in->direction());
}

void TURBOLINK_TO_GRPC(const FGrpcGameMoveRequest* in, ::game::MoveRequest* out)
{
    out->set_player_id((const char*)StringCast<UTF8CHAR>(*(in->PlayerId)).Get());
    out->set_direction(::game::Direction(static_cast<uint8>(in->Direction)));
}

void GRPC_TO_TURBOLINK(const ::game::RoomResponse* in, FGrpcGameRoomResponse* out)
{
    out->X=in->x();
    out->Y=in->y();
    out->Z=in->z();
    out->RoomId=StringCast<TCHAR>((const UTF8CHAR*)(in->room_id().c_str())).Get();
    out->Discovered=in->discovered();
    out->Data=in->data();
}

void TURBOLINK_TO_GRPC(const FGrpcGameRoomResponse* in, ::game::RoomResponse* out)
{
    out->set_x(in->X);
    out->set_y(in->Y);
    out->set_z(in->Z);
    out->set_room_id((const char*)StringCast<UTF8CHAR>(*(in->RoomId)).Get());
    out->set_discovered(in->Discovered);
    out->set_data(in->Data);
}

