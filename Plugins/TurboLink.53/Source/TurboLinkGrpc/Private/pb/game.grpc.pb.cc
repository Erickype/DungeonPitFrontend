// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: game.proto

#include "game.pb.h"
#include "game.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace game {

static const char* DungeonService_method_names[] = {
  "/game.DungeonService/Login",
  "/game.DungeonService/Logout",
  "/game.DungeonService/GetCurrentRoom",
  "/game.DungeonService/Move",
  "/game.DungeonService/GetDungeonData",
};

std::unique_ptr< DungeonService::Stub> DungeonService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DungeonService::Stub> stub(new DungeonService::Stub(channel, options));
  return stub;
}

DungeonService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Login_(DungeonService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logout_(DungeonService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCurrentRoom_(DungeonService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Move_(DungeonService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDungeonData_(DungeonService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DungeonService::Stub::Login(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::game::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::LoginRequest, ::game::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void DungeonService::Stub::async::Login(::grpc::ClientContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::LoginRequest, ::game::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void DungeonService::Stub::async::Login(::grpc::ClientContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::LoginResponse>* DungeonService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::LoginResponse, ::game::LoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::LoginResponse>* DungeonService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DungeonService::Stub::Logout(::grpc::ClientContext* context, const ::game::LogoutRequest& request, ::game::LogoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::LogoutRequest, ::game::LogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Logout_, context, request, response);
}

void DungeonService::Stub::async::Logout(::grpc::ClientContext* context, const ::game::LogoutRequest* request, ::game::LogoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::LogoutRequest, ::game::LogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void DungeonService::Stub::async::Logout(::grpc::ClientContext* context, const ::game::LogoutRequest* request, ::game::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::LogoutResponse>* DungeonService::Stub::PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::game::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::LogoutResponse, ::game::LogoutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Logout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::LogoutResponse>* DungeonService::Stub::AsyncLogoutRaw(::grpc::ClientContext* context, const ::game::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DungeonService::Stub::GetCurrentRoom(::grpc::ClientContext* context, const ::game::PlayerRequest& request, ::game::RoomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::PlayerRequest, ::game::RoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCurrentRoom_, context, request, response);
}

void DungeonService::Stub::async::GetCurrentRoom(::grpc::ClientContext* context, const ::game::PlayerRequest* request, ::game::RoomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::PlayerRequest, ::game::RoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentRoom_, context, request, response, std::move(f));
}

void DungeonService::Stub::async::GetCurrentRoom(::grpc::ClientContext* context, const ::game::PlayerRequest* request, ::game::RoomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::RoomResponse>* DungeonService::Stub::PrepareAsyncGetCurrentRoomRaw(::grpc::ClientContext* context, const ::game::PlayerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::RoomResponse, ::game::PlayerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCurrentRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::RoomResponse>* DungeonService::Stub::AsyncGetCurrentRoomRaw(::grpc::ClientContext* context, const ::game::PlayerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DungeonService::Stub::Move(::grpc::ClientContext* context, const ::game::MoveRequest& request, ::game::RoomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::MoveRequest, ::game::RoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Move_, context, request, response);
}

void DungeonService::Stub::async::Move(::grpc::ClientContext* context, const ::game::MoveRequest* request, ::game::RoomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::MoveRequest, ::game::RoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, std::move(f));
}

void DungeonService::Stub::async::Move(::grpc::ClientContext* context, const ::game::MoveRequest* request, ::game::RoomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::RoomResponse>* DungeonService::Stub::PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::game::MoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::RoomResponse, ::game::MoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Move_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::RoomResponse>* DungeonService::Stub::AsyncMoveRaw(::grpc::ClientContext* context, const ::game::MoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DungeonService::Stub::GetDungeonData(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest& request, ::game::GetDungeonDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::GetDungeonDataRequest, ::game::GetDungeonDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDungeonData_, context, request, response);
}

void DungeonService::Stub::async::GetDungeonData(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest* request, ::game::GetDungeonDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::GetDungeonDataRequest, ::game::GetDungeonDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDungeonData_, context, request, response, std::move(f));
}

void DungeonService::Stub::async::GetDungeonData(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest* request, ::game::GetDungeonDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDungeonData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::GetDungeonDataResponse>* DungeonService::Stub::PrepareAsyncGetDungeonDataRaw(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::GetDungeonDataResponse, ::game::GetDungeonDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDungeonData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::GetDungeonDataResponse>* DungeonService::Stub::AsyncGetDungeonDataRaw(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDungeonDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

DungeonService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DungeonService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DungeonService::Service, ::game::LoginRequest, ::game::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DungeonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::LoginRequest* req,
             ::game::LoginResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DungeonService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DungeonService::Service, ::game::LogoutRequest, ::game::LogoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DungeonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::LogoutRequest* req,
             ::game::LogoutResponse* resp) {
               return service->Logout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DungeonService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DungeonService::Service, ::game::PlayerRequest, ::game::RoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DungeonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::PlayerRequest* req,
             ::game::RoomResponse* resp) {
               return service->GetCurrentRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DungeonService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DungeonService::Service, ::game::MoveRequest, ::game::RoomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DungeonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::MoveRequest* req,
             ::game::RoomResponse* resp) {
               return service->Move(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DungeonService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DungeonService::Service, ::game::GetDungeonDataRequest, ::game::GetDungeonDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DungeonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::GetDungeonDataRequest* req,
             ::game::GetDungeonDataResponse* resp) {
               return service->GetDungeonData(ctx, req, resp);
             }, this)));
}

DungeonService::Service::~Service() {
}

::grpc::Status DungeonService::Service::Login(::grpc::ServerContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DungeonService::Service::Logout(::grpc::ServerContext* context, const ::game::LogoutRequest* request, ::game::LogoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DungeonService::Service::GetCurrentRoom(::grpc::ServerContext* context, const ::game::PlayerRequest* request, ::game::RoomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DungeonService::Service::Move(::grpc::ServerContext* context, const ::game::MoveRequest* request, ::game::RoomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DungeonService::Service::GetDungeonData(::grpc::ServerContext* context, const ::game::GetDungeonDataRequest* request, ::game::GetDungeonDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace game

