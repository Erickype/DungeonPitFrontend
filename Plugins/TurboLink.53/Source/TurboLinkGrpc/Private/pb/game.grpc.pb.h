// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: game.proto
#ifndef GRPC_game_2eproto__INCLUDED
#define GRPC_game_2eproto__INCLUDED

#include "game.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace game {

// Dungeon Service
class DungeonService final {
 public:
  static constexpr char const* service_full_name() {
    return "game.DungeonService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::game::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status Logout(::grpc::ClientContext* context, const ::game::LogoutRequest& request, ::game::LogoutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LogoutResponse>> AsyncLogout(::grpc::ClientContext* context, const ::game::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LogoutResponse>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LogoutResponse>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::game::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::LogoutResponse>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCurrentRoom(::grpc::ClientContext* context, const ::game::PlayerRequest& request, ::game::RoomResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::RoomResponse>> AsyncGetCurrentRoom(::grpc::ClientContext* context, const ::game::PlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::RoomResponse>>(AsyncGetCurrentRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::RoomResponse>> PrepareAsyncGetCurrentRoom(::grpc::ClientContext* context, const ::game::PlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::RoomResponse>>(PrepareAsyncGetCurrentRoomRaw(context, request, cq));
    }
    virtual ::grpc::Status Move(::grpc::ClientContext* context, const ::game::MoveRequest& request, ::game::RoomResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::RoomResponse>> AsyncMove(::grpc::ClientContext* context, const ::game::MoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::RoomResponse>>(AsyncMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::RoomResponse>> PrepareAsyncMove(::grpc::ClientContext* context, const ::game::MoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::RoomResponse>>(PrepareAsyncMoveRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDungeonData(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest& request, ::game::GetDungeonDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::GetDungeonDataResponse>> AsyncGetDungeonData(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::GetDungeonDataResponse>>(AsyncGetDungeonDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::GetDungeonDataResponse>> PrepareAsyncGetDungeonData(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::GetDungeonDataResponse>>(PrepareAsyncGetDungeonDataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Login(::grpc::ClientContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::game::LogoutRequest* request, ::game::LogoutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::game::LogoutRequest* request, ::game::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCurrentRoom(::grpc::ClientContext* context, const ::game::PlayerRequest* request, ::game::RoomResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCurrentRoom(::grpc::ClientContext* context, const ::game::PlayerRequest* request, ::game::RoomResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Move(::grpc::ClientContext* context, const ::game::MoveRequest* request, ::game::RoomResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Move(::grpc::ClientContext* context, const ::game::MoveRequest* request, ::game::RoomResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDungeonData(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest* request, ::game::GetDungeonDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDungeonData(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest* request, ::game::GetDungeonDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::LogoutResponse>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::game::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::LogoutResponse>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::game::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::RoomResponse>* AsyncGetCurrentRoomRaw(::grpc::ClientContext* context, const ::game::PlayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::RoomResponse>* PrepareAsyncGetCurrentRoomRaw(::grpc::ClientContext* context, const ::game::PlayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::RoomResponse>* AsyncMoveRaw(::grpc::ClientContext* context, const ::game::MoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::RoomResponse>* PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::game::MoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::GetDungeonDataResponse>* AsyncGetDungeonDataRaw(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::GetDungeonDataResponse>* PrepareAsyncGetDungeonDataRaw(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Login(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::game::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status Logout(::grpc::ClientContext* context, const ::game::LogoutRequest& request, ::game::LogoutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LogoutResponse>> AsyncLogout(::grpc::ClientContext* context, const ::game::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LogoutResponse>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LogoutResponse>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::game::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::LogoutResponse>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    ::grpc::Status GetCurrentRoom(::grpc::ClientContext* context, const ::game::PlayerRequest& request, ::game::RoomResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::RoomResponse>> AsyncGetCurrentRoom(::grpc::ClientContext* context, const ::game::PlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::RoomResponse>>(AsyncGetCurrentRoomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::RoomResponse>> PrepareAsyncGetCurrentRoom(::grpc::ClientContext* context, const ::game::PlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::RoomResponse>>(PrepareAsyncGetCurrentRoomRaw(context, request, cq));
    }
    ::grpc::Status Move(::grpc::ClientContext* context, const ::game::MoveRequest& request, ::game::RoomResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::RoomResponse>> AsyncMove(::grpc::ClientContext* context, const ::game::MoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::RoomResponse>>(AsyncMoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::RoomResponse>> PrepareAsyncMove(::grpc::ClientContext* context, const ::game::MoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::RoomResponse>>(PrepareAsyncMoveRaw(context, request, cq));
    }
    ::grpc::Status GetDungeonData(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest& request, ::game::GetDungeonDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::GetDungeonDataResponse>> AsyncGetDungeonData(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::GetDungeonDataResponse>>(AsyncGetDungeonDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::GetDungeonDataResponse>> PrepareAsyncGetDungeonData(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::GetDungeonDataResponse>>(PrepareAsyncGetDungeonDataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Login(::grpc::ClientContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Logout(::grpc::ClientContext* context, const ::game::LogoutRequest* request, ::game::LogoutResponse* response, std::function<void(::grpc::Status)>) override;
      void Logout(::grpc::ClientContext* context, const ::game::LogoutRequest* request, ::game::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCurrentRoom(::grpc::ClientContext* context, const ::game::PlayerRequest* request, ::game::RoomResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCurrentRoom(::grpc::ClientContext* context, const ::game::PlayerRequest* request, ::game::RoomResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Move(::grpc::ClientContext* context, const ::game::MoveRequest* request, ::game::RoomResponse* response, std::function<void(::grpc::Status)>) override;
      void Move(::grpc::ClientContext* context, const ::game::MoveRequest* request, ::game::RoomResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDungeonData(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest* request, ::game::GetDungeonDataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDungeonData(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest* request, ::game::GetDungeonDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::game::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::game::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::LogoutResponse>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::game::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::LogoutResponse>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::game::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::RoomResponse>* AsyncGetCurrentRoomRaw(::grpc::ClientContext* context, const ::game::PlayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::RoomResponse>* PrepareAsyncGetCurrentRoomRaw(::grpc::ClientContext* context, const ::game::PlayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::RoomResponse>* AsyncMoveRaw(::grpc::ClientContext* context, const ::game::MoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::RoomResponse>* PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::game::MoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::GetDungeonDataResponse>* AsyncGetDungeonDataRaw(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::GetDungeonDataResponse>* PrepareAsyncGetDungeonDataRaw(::grpc::ClientContext* context, const ::game::GetDungeonDataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_Logout_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCurrentRoom_;
    const ::grpc::internal::RpcMethod rpcmethod_Move_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDungeonData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response);
    virtual ::grpc::Status Logout(::grpc::ServerContext* context, const ::game::LogoutRequest* request, ::game::LogoutResponse* response);
    virtual ::grpc::Status GetCurrentRoom(::grpc::ServerContext* context, const ::game::PlayerRequest* request, ::game::RoomResponse* response);
    virtual ::grpc::Status Move(::grpc::ServerContext* context, const ::game::MoveRequest* request, ::game::RoomResponse* response);
    virtual ::grpc::Status GetDungeonData(::grpc::ServerContext* context, const ::game::GetDungeonDataRequest* request, ::game::GetDungeonDataResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::game::LoginRequest* /*request*/, ::game::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::game::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Logout() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::game::LogoutRequest* /*request*/, ::game::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::game::LogoutRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::LogoutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCurrentRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCurrentRoom() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCurrentRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentRoom(::grpc::ServerContext* /*context*/, const ::game::PlayerRequest* /*request*/, ::game::RoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentRoom(::grpc::ServerContext* context, ::game::PlayerRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::RoomResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Move() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::game::MoveRequest* /*request*/, ::game::RoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMove(::grpc::ServerContext* context, ::game::MoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::RoomResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDungeonData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDungeonData() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetDungeonData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDungeonData(::grpc::ServerContext* /*context*/, const ::game::GetDungeonDataRequest* /*request*/, ::game::GetDungeonDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDungeonData(::grpc::ServerContext* context, ::game::GetDungeonDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::GetDungeonDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Login<WithAsyncMethod_Logout<WithAsyncMethod_GetCurrentRoom<WithAsyncMethod_Move<WithAsyncMethod_GetDungeonData<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::game::LoginRequest, ::game::LoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::LoginRequest* request, ::game::LoginResponse* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::game::LoginRequest, ::game::LoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::LoginRequest, ::game::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::game::LoginRequest* /*request*/, ::game::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::game::LoginRequest* /*request*/, ::game::LoginResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Logout() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::game::LogoutRequest, ::game::LogoutResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::LogoutRequest* request, ::game::LogoutResponse* response) { return this->Logout(context, request, response); }));}
    void SetMessageAllocatorFor_Logout(
        ::grpc::MessageAllocator< ::game::LogoutRequest, ::game::LogoutResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::LogoutRequest, ::game::LogoutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::game::LogoutRequest* /*request*/, ::game::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Logout(
      ::grpc::CallbackServerContext* /*context*/, const ::game::LogoutRequest* /*request*/, ::game::LogoutResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCurrentRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCurrentRoom() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::game::PlayerRequest, ::game::RoomResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::PlayerRequest* request, ::game::RoomResponse* response) { return this->GetCurrentRoom(context, request, response); }));}
    void SetMessageAllocatorFor_GetCurrentRoom(
        ::grpc::MessageAllocator< ::game::PlayerRequest, ::game::RoomResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::PlayerRequest, ::game::RoomResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCurrentRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentRoom(::grpc::ServerContext* /*context*/, const ::game::PlayerRequest* /*request*/, ::game::RoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::game::PlayerRequest* /*request*/, ::game::RoomResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Move() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::game::MoveRequest, ::game::RoomResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::MoveRequest* request, ::game::RoomResponse* response) { return this->Move(context, request, response); }));}
    void SetMessageAllocatorFor_Move(
        ::grpc::MessageAllocator< ::game::MoveRequest, ::game::RoomResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::MoveRequest, ::game::RoomResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::game::MoveRequest* /*request*/, ::game::RoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Move(
      ::grpc::CallbackServerContext* /*context*/, const ::game::MoveRequest* /*request*/, ::game::RoomResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDungeonData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDungeonData() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::game::GetDungeonDataRequest, ::game::GetDungeonDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::GetDungeonDataRequest* request, ::game::GetDungeonDataResponse* response) { return this->GetDungeonData(context, request, response); }));}
    void SetMessageAllocatorFor_GetDungeonData(
        ::grpc::MessageAllocator< ::game::GetDungeonDataRequest, ::game::GetDungeonDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::GetDungeonDataRequest, ::game::GetDungeonDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDungeonData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDungeonData(::grpc::ServerContext* /*context*/, const ::game::GetDungeonDataRequest* /*request*/, ::game::GetDungeonDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDungeonData(
      ::grpc::CallbackServerContext* /*context*/, const ::game::GetDungeonDataRequest* /*request*/, ::game::GetDungeonDataResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Login<WithCallbackMethod_Logout<WithCallbackMethod_GetCurrentRoom<WithCallbackMethod_Move<WithCallbackMethod_GetDungeonData<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::game::LoginRequest* /*request*/, ::game::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Logout() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::game::LogoutRequest* /*request*/, ::game::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCurrentRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCurrentRoom() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCurrentRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentRoom(::grpc::ServerContext* /*context*/, const ::game::PlayerRequest* /*request*/, ::game::RoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Move() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::game::MoveRequest* /*request*/, ::game::RoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDungeonData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDungeonData() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetDungeonData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDungeonData(::grpc::ServerContext* /*context*/, const ::game::GetDungeonDataRequest* /*request*/, ::game::GetDungeonDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::game::LoginRequest* /*request*/, ::game::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Logout() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::game::LogoutRequest* /*request*/, ::game::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCurrentRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCurrentRoom() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCurrentRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentRoom(::grpc::ServerContext* /*context*/, const ::game::PlayerRequest* /*request*/, ::game::RoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentRoom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Move() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::game::MoveRequest* /*request*/, ::game::RoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDungeonData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDungeonData() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetDungeonData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDungeonData(::grpc::ServerContext* /*context*/, const ::game::GetDungeonDataRequest* /*request*/, ::game::GetDungeonDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDungeonData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::game::LoginRequest* /*request*/, ::game::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Logout() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Logout(context, request, response); }));
    }
    ~WithRawCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::game::LogoutRequest* /*request*/, ::game::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Logout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCurrentRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCurrentRoom() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCurrentRoom(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCurrentRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentRoom(::grpc::ServerContext* /*context*/, const ::game::PlayerRequest* /*request*/, ::game::RoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCurrentRoom(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Move() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Move(context, request, response); }));
    }
    ~WithRawCallbackMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::game::MoveRequest* /*request*/, ::game::RoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Move(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDungeonData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDungeonData() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDungeonData(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDungeonData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDungeonData(::grpc::ServerContext* /*context*/, const ::game::GetDungeonDataRequest* /*request*/, ::game::GetDungeonDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDungeonData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::LoginRequest, ::game::LoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::LoginRequest, ::game::LoginResponse>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::game::LoginRequest* /*request*/, ::game::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::LoginRequest,::game::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Logout() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::LogoutRequest, ::game::LogoutResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::LogoutRequest, ::game::LogoutResponse>* streamer) {
                       return this->StreamedLogout(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::game::LogoutRequest* /*request*/, ::game::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::LogoutRequest,::game::LogoutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCurrentRoom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCurrentRoom() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::PlayerRequest, ::game::RoomResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::PlayerRequest, ::game::RoomResponse>* streamer) {
                       return this->StreamedGetCurrentRoom(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCurrentRoom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCurrentRoom(::grpc::ServerContext* /*context*/, const ::game::PlayerRequest* /*request*/, ::game::RoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCurrentRoom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::PlayerRequest,::game::RoomResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Move : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Move() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::MoveRequest, ::game::RoomResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::MoveRequest, ::game::RoomResponse>* streamer) {
                       return this->StreamedMove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Move() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Move(::grpc::ServerContext* /*context*/, const ::game::MoveRequest* /*request*/, ::game::RoomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::MoveRequest,::game::RoomResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDungeonData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDungeonData() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::GetDungeonDataRequest, ::game::GetDungeonDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::GetDungeonDataRequest, ::game::GetDungeonDataResponse>* streamer) {
                       return this->StreamedGetDungeonData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDungeonData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDungeonData(::grpc::ServerContext* /*context*/, const ::game::GetDungeonDataRequest* /*request*/, ::game::GetDungeonDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDungeonData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::GetDungeonDataRequest,::game::GetDungeonDataResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_GetCurrentRoom<WithStreamedUnaryMethod_Move<WithStreamedUnaryMethod_GetDungeonData<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_GetCurrentRoom<WithStreamedUnaryMethod_Move<WithStreamedUnaryMethod_GetDungeonData<Service > > > > > StreamedService;
};

}  // namespace game


#endif  // GRPC_game_2eproto__INCLUDED
